For project number 5 we were supposed to get a handle on what it means to design an object oriented program and to practice concepts that involve operator overloading, instantiation of member variables, parameter list, and to deal with more complicated involvement of static member functions. This program proved to be a valid learning experience and I really enjoyed the approach to the assignment whereby we were given a file and were able to interact with parameters as we designed them. This really made it simple to identify what our overall objective was and to build useful and meaningful functions that served the correct purpose. As I coded and observed the overall design process, it seemed like the included .cpp file was created to “hold our hand” as we created this program. It started with a simple base class declaration and once the function was created correctly outputted the creation of a our first object that was formatted correctly. As I progressed through out the given .cpp file it became apparent that I needed to created an overloaded insertion operator because the .cpp file had been designed to have use output objects with the insertion operator. I was reluctantly holding off, but then I decided it was time to step up to the big leagues and create a friend of the class!  After establishing this new relationship of the class I created an assignment overload operator, but it’s still a bit confusing to me how we’re supposed to assign values to a const member function if we can’t called the copy constructor explicitly. Given more time I would like to clarify this with someone. I will ask the Christos about it during the week, however for now, my implementation is designed to overwrite values. As the program created more objects I was able to see how the deconstruction of the objects takes place from last in first out method. Just like a stack! Which I think would make sense because of how a stack implements the creation of new items.  

Being “hand-held” as I created the implementation for the car class was really cool because I got to see the inheritance kind of manifest in before my programs execution! When ever a constructor was called for the derived class I saw that it would invoke the constructor for the base class prior to executing the derived class. I struggled for a while to figure out how to get access to the private members of the base class from the derived class and then I learned that I had access to them! It wasn’t until after I created the overload operator for the insertion operator that I made this connection and realized that I have direct access to all of the member functions of my class and the objects in them. This is cool. Still rusty at it, but it’s cool! Given more time I would have really just started earlier so that I could have had the opportunity to ask questions and solidify my learning concepts. 

My major difficulty was getting over the fact that in a different class I had access to another classes member functions and members. It was strange to have direct access in this new way. I’m assuming that I programmed mine correctly, it feels weird like I broke a lot of rules, but also somehow got it to work. I guess it feels that way because it made more intuitive sense to actually call upon methods that were nicely documented and told you what you were doing. I think one of the largest take aways from this project is that it required good documentation and ensuring that you’re referencing the right scope. OH, I almost wrote some of the wrong class functions in to the wrong class, but I caught it early, had I done that, this project would have turned into a nightmare quickly! All in all, I enjoyed this assignment.
